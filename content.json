{"meta":{"title":"秋雨样的个人博客","subtitle":"qwq","description":"好少年光芒万丈","author":"qiuyuyang","url":"http://example.com","root":"/"},"pages":[{"title":"about","date":"2018-12-12T14:14:36.000Z","updated":"2023-09-22T13:52:39.000Z","comments":false,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"[秋雨样のhojun] 与&nbsp; Mashiro&nbsp; （ 秋雨样） ） 对话中... bot_ui_ini()"},{"title":"client","date":"2018-12-20T15:13:35.000Z","updated":"2023-09-22T13:52:39.000Z","comments":false,"path":"client/index.html","permalink":"http://example.com/client/index.html","excerpt":"","text":"直接下载 or 扫码下载："},{"title":"comment","date":"2018-12-20T15:13:48.000Z","updated":"2023-09-22T13:52:39.000Z","comments":true,"path":"comment/index.html","permalink":"http://example.com/comment/index.html","excerpt":"","text":"念两句诗 叙别梦、扬州一觉。 【宋代】吴文英《夜游宫·人去西楼雁杳》"},{"title":"bangumi","date":"2020-02-19T06:00:00.000Z","updated":"2023-09-22T13:52:39.000Z","comments":false,"path":"bangumi/index.html","permalink":"http://example.com/bangumi/index.html","excerpt":"","text":""},{"title":"donate","date":"2018-12-20T15:13:05.000Z","updated":"2023-09-22T13:52:39.000Z","comments":false,"path":"donate/index.html","permalink":"http://example.com/donate/index.html","excerpt":"","text":""},{"title":"links","date":"2020-02-08T06:11:06.000Z","updated":"2023-09-26T13:21:22.184Z","comments":true,"path":"links/index.html","permalink":"http://example.com/links/index.html","excerpt":"","text":""},{"title":"music","date":"2018-12-20T15:14:28.000Z","updated":"2023-09-22T13:52:39.000Z","comments":false,"path":"music/index.html","permalink":"http://example.com/music/index.html","excerpt":"","text":""},{"title":"lab","date":"2019-01-05T13:47:59.000Z","updated":"2023-09-22T13:52:39.000Z","comments":false,"path":"lab/index.html","permalink":"http://example.com/lab/index.html","excerpt":"","text":"啥也没做啥也没有"},{"title":"video","date":"2018-12-20T15:14:38.000Z","updated":"2023-09-22T13:52:39.000Z","comments":false,"path":"video/index.html","permalink":"http://example.com/video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '放送时间: 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 番组计划 这里将是永远的回忆 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }"},{"title":"rss","date":"2018-12-20T15:09:03.000Z","updated":"2023-09-22T13:52:39.000Z","comments":true,"path":"rss/index.html","permalink":"http://example.com/rss/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-12-12T14:14:16.000Z","updated":"2023-09-22T13:52:39.000Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"mysql笔记+常用指令","slug":"mysql笔记-常用指令","date":"2023-10-19T06:43:14.000Z","updated":"2023-10-21T03:09:42.811Z","comments":true,"path":"posts/1b45149e.html","link":"","permalink":"http://example.com/posts/1b45149e.html","excerpt":"","text":"引言写写学习笔记，绝大多数的内容都可以在这篇教程中看到，这里只补充可能会经常翻阅的内容~ 常用指令可能会经常翻，所以放前面来了~ mysql –u用户名 [–h主机名或者IP地址,-P端口号] –p密码 #该命令是在命令行窗口下执行，而不是MySQL的命令行 mysqladmin -uroot -p password #修改密码 USE test;#选择数据库 CREATE DATABASE test;#创建一个已知不存在的数据库 为了不产生错误，在创建数据库的时候可以加上一些简单的逻辑判断，判断数据库是否存在，不存在也不产生错误。会产生一个警告 CREATE DATABASE if not exists test; 使用普通用户登陆 MySQL 服务器，你可能需要特定的权限来创建或者删除 MySQL 数据库。所以我们这边使用root用户登录，root用户拥有最高权限，可以使用 mysql mysqladmin 命令来创建数据库。 mysqladmin -uroot -p create test 删除数据库删除一个已经确定存在的数据库DROP DATABASE test2; 删除一个不确定存在的数据库drop database if exists test2; 管理工具删除mysqladmin -uroot -p drop test 查看存储引擎SHOW VARIABLES LIKE &#39;%storage_engine%&#39;; 创建table-- 如果数据库中存在user_accounts表，就把它从数据库中drop掉 DROP TABLE IF EXISTS `user_accounts`; CREATE TABLE `user_accounts` ( `id` int(100) unsigned NOT NULL AUTO_INCREMENT primary key, `password` varchar(32) NOT NULL DEFAULT &#39;&#39; COMMENT &#39;用户密码&#39;, `reset_password` tinyint(32) NOT NULL DEFAULT 0 COMMENT &#39;用户类型：0－不需要重置密码；1-需要重置密码&#39;, `mobile` varchar(20) NOT NULL DEFAULT &#39;&#39; COMMENT &#39;手机&#39;, `create_at` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `update_at` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), -- 创建唯一索引，不允许重复 UNIQUE INDEX idx_user_mobile(`mobile`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&#39;用户表信息&#39;; 需要注意的是，在我用的版本5.5.xx中，current_timestamp在一个表中是不能有第二的，这个大坑让我排了很久….. 数据类型的属性解释 NULL：数据列可包含NULL值；NOT NULL：数据列不允许包含NULL值；DEFAULT：默认值；PRIMARY KEY：主键；AUTO_INCREMENT：自动递增，适用于整数类型；UNSIGNED：是指数值类型只能为正数；CHARACTER SET name：指定一个字符集；COMMENT：对表或者字段说明； 增删改查SELECTSELECT 语法 语句用于从表中选取数据。也就是查看数据 SELECT 列名称1, 列名称2, ... FROM 表名称; SELECT * FROM 表名称; -- 从 Customers 表中选择 CustomerName 和 City 列： SELECT CustomerName, City FROM Customers; -- 从 Customers 表中选择所有列： SELECT * FROM Customers; -- 表 station 取个别名叫 s，表 station 中不包含 字段 id=13 或者 14 的，并且 id 不等于 4 的 查询出来，只显示 id SELECT s.id from station s WHERE id in (13,14) and id not in (4); -- 从表 users 选取 id=3 的数据，并只拉一条数据(据说能优化性能) SELECT * FROM users where id=3 limit 1 -- 结果集中会自动去重复数据 SELECT DISTINCT Company FROM Orders -- 表 Persons 字段 Id_P 等于 Orders 字段 Id_P 的值， -- 结果集显示 Persons表的 LastName、FirstName字段，Orders表的OrderNo字段 SELECT p.LastName, p.FirstName, o.OrderNo FROM Persons p, Orders o WHERE p.Id_P = o.Id_P -- gbk 和 utf8 中英文混合排序最简单的办法 -- ci是 case insensitive, 即 “大小写不敏感” SELECT tag, COUNT(tag) from news GROUP BY tag order by convert(tag using gbk) collate gbk_chinese_ci; SELECT tag, COUNT(tag) from news GROUP BY tag order by convert(tag using utf8) collate utf8_unicode_ci; UPDATEUpdate 语法 语句用于修改表中的数据。 UPDATE 表名称 SET 列名称1 = 值1, 列名称2 = 值2, ... WHERE 条件; -- update语句设置字段值为另一个结果取出来的字段 UPDATE user set name = (SELECT name from user1 WHERE user1 .id = 1 ) WHERE id = (SELECT id from user2 WHERE user2 .name=&#39;小苏&#39;); -- 更新表 orders 中 id=1 的那一行数据更新它的 title 字段 UPDATE `orders` set title=&#39;这里是标题&#39; WHERE id=1; INSERTINSERT 语法 用于向表格中插入新的行。 INSERT INTO 表名称 (列名称1, 列名称2, 列名称3, ...) VALUES (值1, 值2, 值3, ...); INSERT INTO 表名称 VALUES (值1, 值2, 值3, ...); -- 向表 Persons 插入一条字段 LastName = JSLite 字段 Address = shanghai INSERT INTO Persons (LastName, Address) VALUES (&#39;JSLite&#39;, &#39;shanghai&#39;); -- 向表 meeting 插入 字段 a=1 和字段 b=2 INSERT INTO meeting SET a=1,b=2; -- -- SQL实现将一个表的数据插入到另外一个表的代码 -- 如果只希望导入指定字段，可以用这种方法： -- INSERT INTO 目标表 (字段1, 字段2, ...) SELECT 字段1, 字段2, ... FROM 来源表; INSERT INTO orders (user_account_id, title) SELECT m.user_id, m.title FROM meeting m where m.id=1; -- 向表 charger 插入一条数据，已存在就对表 charger 更新 `type`,`update_at` 字段； INSERT INTO `charger` (`id`,`type`,`create_at`,`update_at`) VALUES (3,2,&#39;2017-05-18 11:06:17&#39;,&#39;2017-05-18 11:06:17&#39;) ON DUPLICATE KEY UPDATE `id`=VALUES(`id`), `type`=VALUES(`type`), `update_at`=VALUES(`update_at`); DELETEDELETE 语法 语句用于删除表中的现有记录 DELETE FROM 表名称 WHERE 条件; DELETE FROM table_name -- 或者 DELETE * FROM table_name -- 删除 Person 表字段 LastName = &#39;JSLite&#39; DELETE FROM Person WHERE LastName = &#39;JSLite&#39; -- 删除 表meeting id 为2和3的两条数据 DELETE from meeting where id in (2,3); WHEREWHERE 语法 用于仅提取满足指定条件的记录 SELECT 列名称, 列名称, ... FROM 表名称 WHERE 条件1; -- 从表 Persons 中选出 Year 字段大于 1965 的数据 SELECT * FROM Persons WHERE Year&gt;1965 -- 从 Customers 表中选择 Country = Mexico 的所有数据： SELECT * FROM Customers WHERE Country=&#39;Mexico&#39;; -- 从 Customers 表中选择 CustomerID = 1 的所有数据： SELECT * FROM Customers WHERE CustomerID=1; AND, OR 和 NOT就和不同and or not 没啥区别 ORDER BYORDER BY 语法 用于按升序或降序对结果集进行排序 默认按 ASC 升序对记录进行排序。要按降序对记录进行排序，请使用 DESC 关键字 不会点这里 GROUP BY暂时没搞懂~ GROUP BY 语法 将具有相同值的行分组到汇总行中 SELECT 列名称(s) FROM 表名称 WHERE 条件 GROUP BY 列名称(s) ORDER BY 列名称(s); ININ 语法 是多个 OR 条件的简写 UNIONUNION 语法 操作符用于合并两个或多个 SELECT 语句的结果集 SELECT 列名称(s) FROM 表名称1 UNION SELECT 列名称(s) FROM 表名称2; BETWEEN每错，就是between and SELECT 列名称(s) FROM 表名称 WHERE 列名称 BETWEEN 值1 AND 值2; ASAS 语法 用于为表或表中的列(字段)提供临时名称(别名)。 SELECT 列名称 AS 别名 FROM 表名称; SELECT 列名称(s) FROM 表名称 AS 别名; JOINJOIN 子句用于根据两个或多个表之间的相关列组合来自两个或多个表的行 JOIN: 如果表中有至少一个匹配，则返回行INNER JOIN:在表中存在至少一个匹配时，INNER JOIN 关键字返回行。LEFT JOIN: 即使右表中没有匹配，也从左表返回所有的行RIGHT JOIN: 即使左表中没有匹配，也从右表返回所有的行FULL JOIN: 只要其中一个表中存在匹配，就返回行(MySQL 是不支持的，通过 LEFT JOIN + UNION + RIGHT JOIN 的方式 来实现) INNER JOINSELECT 列名称(s) FROM 表1 INNER JOIN 表2 ON 表1.列名称 = 表2.列名称; LEFT JOINLEFT JOIN 语法 返回左表 (表1) 中的所有记录，以及右表 (表2) 中的匹配记录 SELECT 列名称(s) FROM 表1 LEFT JOIN 表2 ON 表1.列名称 = 表2.列名称; RIGHT JOINRIGHT JOIN 语法 返回右表 (表2) 中的所有记录，以及左表 (表1) 中的匹配记录 SELECT 列名称(s) FROM 表1 RIGHT JOIN 表2 ON 表1.列名称 = 表2.列名称; FULL OUTER JOINFULL OUTER JOIN 语法 当左（表1）或右（表2）表记录中存在匹配时，关键字返回所有记录 SQL 函数感觉很少用到，不懂看这个 MyCli替代MySQL的mysql命令行工具根据我看的教程，非常对剑mycli，所以就准备将mysql命令行工具改为mysql 安装python3centos7自带了python2，下面贴一个安装python3的指令 wget https://www.python.org/ftp/python/3.7.2/Python-3.7.2.tar.xz tar -xvJf Python-3.7.2.tar.xz mkdir /usr/local/python3 cd Python-3.7.2 ./configure --prefix=/usr/local/python3 --enable-optimizations --with-ssl make &amp;&amp; make install ln -s /usr/local/python3/bin/python3 /usr/local/bin/python3 ln -s /usr/local/python3/bin/pip3 /usr/local/bin/pip3 安装mycli#安装pip，然后用pip安装mycli yum install -y python-pip python-devel libffi-devel openssl-devel pip3 install --upgrade pip pip3 install --ignore-installed mycli pip3 install pymysql #配置将安装好的mycli拷贝到 /bin/ cp /usr/local/python3/bin/mycli /bin/ #启用mycli mycli --version mycli -uroot -proot","categories":[{"name":"技术","slug":"技术","permalink":"http://example.com/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[],"author":"秋雨样"},{"title":"c语言备忘录","slug":"c语言备忘录","date":"2023-10-13T05:46:38.000Z","updated":"2023-10-28T13:25:49.120Z","comments":true,"path":"posts/514181d1.html","link":"","permalink":"http://example.com/posts/514181d1.html","excerpt":"","text":"前言在学习的过程中，我或多或少会遇到一些问题，当我解决后，希望留个方便的地方记录一下，方便以后查找，故写下此备忘录。 2023-10-13 c语言输出文件中的内容到终端使用fgets()函数可以达到目的 FILE *fp = fopen(&quot;scores.txt&quot;, &quot;r&quot;); if (fp == NULL) &#123; printf(&quot;无法打开文件\\n&quot;); return 1; &#125; char buffer[1024]; while (fgets(buffer, 1024, fp)) &#123; printf(&quot;%s&quot;, buffer); &#125; fclose(fp); fgets()用法char* fgets(char* str, int STRLEN, File* fp); 第一个参数str是一个字符串指针，用于存放读取的内容。第二个参数STRLEN指定读取的长度，第三个参数是一个 FILE 指针，指向要读取的文件。 fgets()读取 STRLEN - 1个字符之后，或者遇到换行符与文件结尾，就会停止读取，然后在已经读取的内容末尾添加一个空字符\\0，使之成为一个字符串。注意，fgets()会将换行符（\\n）存储进字符串。–form 网道 2023-10-13 二分法 #include&lt;stdio.h&gt; long long int a[200005]; void solve() &#123; long long int n, x; scanf(&quot;%lld %lld&quot;, &amp;n, &amp;x); long long int i; for (i = 0; i &lt; n; i++) scanf(&quot;%lld&quot;, &amp;a[i]); long long int min = -1, max = 1e10, mid; long long int sum; while (max - min &gt; 1)//二分法的判断不可以写成max - min &gt; 0 &#123; mid = (max + min) / 2; sum = 0; for (i = 0; i &lt; n; i++) if (a[i] &lt; mid) sum += mid - a[i]; if (sum &lt;= x) min = mid; else max = mid; &#125; printf(&quot;%lld\\n&quot;, min); return; &#125; int main() &#123; int t; scanf(&quot;%d&quot;, &amp;t); for (; t &gt; 0; t--) solve(); return 0; &#125; 数组存中文问题写作业的时候经常会遇到数组存中文的情况wwww,将中文字符存入文件里面简直就是天坑，在我的编译环境里面。用utf-8存是死活存不进去，最后直接问ai告诉你得用utf-16le存，搞了一下午+一早上这才搞好，贴个例子 上面代码在vscode里还得用外置的终端打开….宽字符的处理是真的麻烦…. 天坑vscode打开格式是utf-8，而你打字输入的中文是gbk导致编码不一样，得改编码。。。参考这篇已经存在的文件全部使用gbk编码重新保存。settings.json文件添加以下内容，使文件全部变成gbk编码： &#123; &quot;files.encoding&quot;: &quot;gbk&quot; &#125; launch.json中修改以下内容，使用外置控制台运行编译后程序： &#123; &quot;configurations&quot;: [ &#123; ... &quot;externalConsole&quot;: true, ... &#125; ], &quot;version&quot;: &quot;2.0.0&quot; &#125; 内存的动态分配用字符指针存数据。 #include &lt;stdio.h&gt; #include &lt;string.h&gt; #include &lt;stdlib.h&gt; int main() &#123; char *str; char maxChar; int hasInput = 0; size_t len = 0; size_t size = 10001; // 初始大小 str = (char *)malloc(size * sizeof(char)); if (!str) &#123; printf(&quot;Memory allocation failed\\n&quot;); return 1; &#125; // 获取输入 while (1) &#123; char c = getchar(); if (c == EOF || c == &#39;\\n&#39;) &#123; str[len] = &#39;\\0&#39;; break; &#125; str[len++] = c; if (len == size - 1) &#123; // 如果接近分配的大小，重新分配更多的内存 size *= 2; char *new_str = (char *)realloc(str, size * sizeof(char)); if (!new_str) &#123; printf(&quot;Memory reallocation failed\\n&quot;); free(str); return 1; &#125; str = new_str; &#125; &#125; // 如果字符串是空的 if (len == 0) &#123; printf(&quot;N/A\\n&quot;); free(str); return 0; &#125; // 初始化maxChar为字符串的第一个字符 maxChar = str[0]; // 遍历字符串找到ASCII码最大的字符 for (size_t i = 1; i &lt; len; i++) &#123; if (str[i] &gt; maxChar) &#123; maxChar = str[i]; hasInput = 1; &#125; &#125; // 输出结果 if (hasInput) &#123; printf(&quot;%c\\n&quot;, maxChar); &#125; else &#123; printf(&quot;N/A\\n&quot;); &#125; free(str); return 0; &#125; 为什么没有赋值的字符指针用malloc分配空间后就可以赋值了？为了理解这个问题，我们需要深入了解字符指针（或任何指针）和malloc函数的工作原理。 指针的本质: 一个指针变量存储的是内存地址。当我们声明一个指针变量，如char *ptr;，ptr只是一个能够存储地址的变量，但此时它尚未初始化，所以它包含的地址是不确定的（通常称为野指针）。 赋值给指针: 当你尝试通过一个未初始化的指针赋值，如*ptr = &#39;a&#39;;，你实际上是在尝试向一个不确定的地址写入数据，这是危险的，并且通常会导致程序崩溃。 malloc的作用: malloc函数用于动态分配内存。当你调用malloc，它为你保留一块指定大小的连续内存，并返回这块内存的首地址。例如，char *ptr = (char *)malloc(10 * sizeof(char)); 为ptr分配了可以存储10个字符的空间，并返回这块空间的地址。 指针赋值后的使用: 一旦你为指针分配了内存，你就可以安全地使用这块内存了。例如，你可以这样做ptr[0] = &#39;a&#39;;，因为你知道ptr指向的地址现在是你已经分配的内存。 总结：一个未初始化的指针没有指向任何已知的、安全的内存位置。通过使用malloc，我们为指针分配一块确定的、已知的内存空间，这使我们能够安全地在那个地址处存储和检索数据。但请注意，使用完malloc分配的内存后，应使用free函数释放它，以避免内存泄漏。 那为什么赋值后的字符串不能修改，而上述问题的可以修改这个问题涉及到字符串字面量和动态分配的内存的不同。 字符串字面量: 当我们使用字符串字面量，例如： char *str = &quot;Hello&quot;; str 指向的是程序的常量区域（或称为文本段），其中存储的数据是只读的。因此，尝试修改通过字符串字面量初始化的指针指向的内容会导致未定义的行为（通常是程序崩溃）。 动态分配的内存: 当我们使用malloc（或calloc）为字符串分配内存，例如： char *str = (char *)malloc(6 * sizeof(char)); strcpy(str, &quot;Hello&quot;); 这种情况下，str 指向的是堆上的一块内存，这块内存是可以读写的。因此，你可以修改str指向的内容，例如str[0] = &#39;h&#39;;。 另一种情况是当我们使用字符数组来存储字符串时： char str[] = &quot;Hello&quot;; 在这种情况下，str 是一个数组，并在栈上为其分配了内存。这块内存是可以读写的，所以我们可以修改字符串内容。 总之，字符串的可修改性取决于它存储的位置：字符串字面量是只读的，而在堆或栈上分配的字符串是可以修改的。 字符的输入%printf(&quot;%%&quot;);","categories":[{"name":"技术","slug":"技术","permalink":"http://example.com/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"c语言","slug":"c语言","permalink":"http://example.com/tags/c%E8%AF%AD%E8%A8%80/"}],"author":"秋雨样"},{"title":"when2meet使用教程","slug":"when2meet使用教程","date":"2023-09-25T15:55:06.000Z","updated":"2023-09-26T13:11:44.259Z","comments":true,"path":"posts/4f5c6e7c.html","link":"","permalink":"http://example.com/posts/4f5c6e7c.html","excerpt":"","text":"什么是when2meet？when2meet是一个安排活动会议，确定大家空闲时间，来方便确定活动或者会议时间的工具。 为什么要用when2meet？以便确定各位同学的空闲时间，来更好的安排活动会议，以求不打乱同学的安排 我是参与者，我要如和使用when2meet？活动的组织者会向群里发送一个链接例如：https://www.when2meet.com/?21552023-I8tZc ，你应该使用手机或者电脑打开链接（推荐使用电脑，手机屏幕太小，操作有些不方便）左边是登录区，右边显示的是现在小组里面的时间分布，颜色越绿一般代表这个时间段大家空闲时间最多。上面图片箭头所指的代表者不同颜色对应有多少人有空闲时间。现在回到左边的登录区，Your Name填你自己喜欢的名字，但请一定要记住，这关系到你以后安排有变动用与更改空闲时间，password可填可不填，每一个链接对应一个your name，既你可以在不同活动（既不同链接）中使用不同的名字，但我建议你不要这样做，容易搞混。当你登录后，你就可以在左边标出你的空闲时间（绿色），表格中是以一个颜色块为单位，再次点击绿色块即可标记为没有空闲。在电脑上，你可以使用鼠标拖动来快速标绿。手机也同样如此。但你空闲时间标记完后，你就可以等活动通知了，记得自己空闲时间改变要再次点击链接重新调整。 我是活动组织者我该如何使用when2meet？首先你要确定活动大致的范围，再用电脑打开网站https://www.when2meet.com/ 首先在上方输入活动名称，再在右边填写大致日期，既你要确定同学们时间的日期一共有两种模式特定时间和一周内的时间，用左键确定日期或星期。右边可以确定最早时间和最晚时间注意，时区只能选择asia&#x2F;shanghai不是一定要调成这个，选择days of the week没有这个选项。当这些都设置好后你就可以点击create event啦！接下来你就应该准备好活动内容，并附上点击后跳转的页面的链接让同学们填写啦！！！ 后记有任何问题可以向我提问，我也会及时更新常见问题在这篇博文 Q&amp;A","categories":[{"name":"技术","slug":"技术","permalink":"http://example.com/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[],"author":"秋雨样"},{"title":"div4 Codeforces Round 898","slug":"div4-Codeforces-Round-898","date":"2023-08-12T03:04:58.000Z","updated":"2023-09-25T15:12:56.581Z","comments":true,"path":"posts/f223c98.html","link":"","permalink":"http://example.com/posts/f223c98.html","excerpt":"","text":"前言这次是我第一次参加算法比赛，很多题也没做到，希望下次能多做一些。 A打卡题，没啥好说的 B我的思路B在我思考了一下，发现+1对数组里面最小的加对整体收益是最大的，所以使用插入排序对整体进行排序，再对最小数+1。 bing 思路#include &lt;stdio.h&gt; int main() &#123; int t; scanf(&quot;%d&quot;, &amp;t); while (t--) &#123; int n; scanf(&quot;%d&quot;, &amp;n); int a[n]; for (int i = 0; i &lt; n; ++i) &#123; scanf(&quot;%d&quot;, &amp;a[i]); &#125; int max_product = 1; for (int i = 0; i &lt; n; ++i) &#123; if (a[i] == 0) &#123; continue; &#125; int product = 1; for (int j = 0; j &lt; n; ++j) &#123; if (i == j) &#123; product *= a[j] + 1; &#125; else &#123; product *= a[j]; &#125; &#125; if (product &gt; max_product) &#123; max_product = product; &#125; &#125; printf(&quot;%d\\n&quot;, max_product); &#125; return 0; &#125; bing的思路有点没看懂，他如是说到： 这段代码是一个C语言程序，它的作用是读取一些整数，计算它们的乘积，然后输出乘积的最大值。程序首先读取一个整数t，表示测试用例的数量。接下来，对于每个测试用例，程序会读取一个整数n，表示数组a的大小。然后程序会读取n个整数，存储在数组a中。接下来，程序会计算每个元素加1后的乘积（除了当前元素），并将其与当前元素的乘积相比较。如果当前元素的乘积大于最大乘积，则更新最大乘积。最后，程序输出最大乘积。这段代码中使用了C语言标准库中的函数scanf和printf来读取和输出数据。scanf函数从标准输入流中读取数据，并将其存储在变量中。printf函数将数据格式化为字符串，并将其写入标准输出流中。在这段代码中，变量t、n、a、max_product、product、i和j都是整型变量。变量t、n和a分别存储测试用例数量、数组大小和数组元素。变量max_product存储最大乘积，变量product存储当前元素加1后的乘积。变量i和j是循环计数器。这段代码使用了两个for循环来遍历数组a中的所有元素，并计算它们的乘积。外部循环遍历数组a中的所有元素，内部循环计算每个元素加1后的乘积（除了当前元素），并将其与当前元素的乘积相比较。如果当前元素的乘积大于最大乘积，则更新最大乘积。请注意，在这段代码中，数组a的大小是在运行时动态分配的，因此它必须是一个变长数组（VLA）。这意味着它只能在C99或更高版本中使用。 最后发现有问题，当输入 5 0 0 0 5 时得不到正确答案。 C在做了的题目里面我耗时最长的就是C了，对于C组题，是一个算靶子中箭得分的题，我用的多个for 循环+if判断，实际可以取横纵坐标与边缘的最小值为分数，这样就会简单很多，例如 #inlcude&lt;stdio.h&gt; int min(int a, int b)&#123; if (a &lt; b) return a; else return b; &#125; char s[16][16]; void solve() &#123; int i, j, n = 10; for (i = 0; i &lt; n; i++) scanf(&quot;%s&quot;, s[i]); int ans = 0; for (i = 0; i &lt; n; i++) for (j = 0; j &lt; n; j++) if (s[i][j] == &#39;X&#39;) ans += min(min(i + 1, 10 - i), min(j + 1, 10 - j)); printf(&quot;%d\\n&quot;, ans); return; &#125; int main() &#123; int t; scanf(&quot;%d&quot;, &amp;t); for (; t &gt; 0; t--) solve(); return 0; &#125; Dhttps://codeforces.com/contest/1873/problem/Dd就相对简单了，目标是将B变为W需要的次数，唯一要小心的是有肯能用a[]时有溢出，我是将遇到B后将后几位全部变为W再次从头搜索B。 Ehttps://codeforces.com/contest/1873/problem/E我用for 循环遍历，结果超时用嵌套循环遇见数据量小的还好说，数据量大的就会直接超时，做不出来原因还是没有想出好的算法，我后面想用二分法解决，但没想到啥实现办法，贴一个我自己的错误代码 #include&lt;stdio.h&gt; void m(int b ,int c)&#123; int d[b]; for(int i =0;i&lt;b;i++)&#123; scanf(&quot;%d&quot;,&amp;d[i]);//存值 &#125; int j=0; int k =0; for(int i=1;;i++)&#123;//for嵌套循环 k++; for(int o = 0;o&lt;b;o++)&#123; if(d[o]&lt;i) j+=i-d[o]; &#125; if(j&gt;c) break; else j =0; &#125; printf(&quot;%d\\n&quot;,k-1); return; &#125; int main()&#123; int p; scanf(&quot;%d&quot;,&amp;p); while (p--) &#123; int b,c; scanf(&quot;%d%d&quot;,&amp;b,&amp;c); m(b,c); &#125; &#125; 我看ac有人用二分法做出来了，贴一个 #include&lt;stdio.h&gt; long long int a[200005]; void solve() &#123; long long int n, x; scanf(&quot;%lld %lld&quot;, &amp;n, &amp;x); long long int i; for (i = 0; i &lt; n; i++) scanf(&quot;%lld&quot;, &amp;a[i]); long long int min = -1, max = 1e10, mid; long long int sum; while (max - min &gt; 1) &#123; mid = (max + min) / 2; sum = 0; for (i = 0; i &lt; n; i++) if (a[i] &lt; mid) sum += mid - a[i]; if (sum &lt;= x) min = mid; else max = mid; &#125; printf(&quot;%lld\\n&quot;, min); return; &#125; int main() &#123; int t; scanf(&quot;%d&quot;, &amp;t); for (; t &gt; 0; t--) solve(); return 0; &#125; 这就给我提供了一个二分法的思路，设极小值-1，极大值le10 用max-min&gt;1做判断也真理解到了什么叫不开long long见族宗了，真就学到了，然后我写了一遍，结果不对，看来还是没有完全理解","categories":[{"name":"资源","slug":"资源","permalink":"http://example.com/categories/%E8%B5%84%E6%BA%90/"}],"tags":[{"name":"div4","slug":"div4","permalink":"http://example.com/tags/div4/"}]},{"title":"IDM（Internet Download Manager）破解版分享","slug":"IDM（Internet Download Manager）破解版分享","date":"2020-08-12T03:04:58.000Z","updated":"2023-09-22T13:52:39.000Z","comments":true,"path":"posts/23072875.html","link":"","permalink":"http://example.com/posts/23072875.html","excerpt":"","text":"IDM是一个超级好用的多线程下载器可以极大的提到下载速度，但有的时候网站会禁止这种行为 俄罗斯大佬破解后从新封装的IDM，使用起来没啥问题你可以去官网（但是并不建议你这样做，我的下载体验真的是一言难尽）；也可以使用我下方提供的下载链接下载。 下载链接: 百度：链接: https://pan.baidu.com/s/1sbcGUebSIxpbdnGOOnmr9Q 提取码: 5555","categories":[{"name":"资源","slug":"资源","permalink":"http://example.com/categories/%E8%B5%84%E6%BA%90/"}],"tags":[{"name":"-IDM","slug":"IDM","permalink":"http://example.com/tags/IDM/"}],"author":"秋雨样"},{"title":"随想01","slug":"随想01","date":"2020-05-01T09:17:21.000Z","updated":"2023-09-22T13:52:39.000Z","comments":true,"path":"posts/4c1b3376.html","link":"","permalink":"http://example.com/posts/4c1b3376.html","excerpt":"","text":"不知不觉，3年的初中生活也将进入尾声。在我看来，三年的初中生活让我成长了许多，思想上也有了很大的变化。脱去了稚嫩换来了真实，敬佩世间的善良，也厌恶世间的黑暗。每当回头瞻望以前的所作所为是多么的可笑。“我会后悔以前做那些蠢事么？”我想不会。虽然很蠢但却是当时那个环境与思想共同所做的决定，更能从中学到一些东西并以此来告诫自己。一个人思想的改变对人的兴趣爱好等有着巨大的影响力甚至可以改变人的一生。巴尔扎克说过“一个能思想的人，才真是一个力量无边的人。”由此可见思想的重要性。在我的身边也出现过以前成绩还可以但上了初中后思想出现改变就愈发的不行了，更有以前中等水平的人逆袭成学霸的故事。而这些故事的背后何不牵扯到人对学习方面思想的变化。人总是向前看的，而过去的终将成为回忆，不一定美好但一定深刻。没准以后我看到这简短的文章也会觉得当时的我是多么的可笑。","categories":[{"name":"随想","slug":"随想","permalink":"http://example.com/categories/%E9%9A%8F%E6%83%B3/"}],"tags":[],"author":"秋雨样"},{"title":"qwq","slug":"qwq","date":"2020-04-01T02:58:39.000Z","updated":"2023-09-22T13:52:39.000Z","comments":true,"path":"posts/ed0e75ee.html","link":"","permalink":"http://example.com/posts/ed0e75ee.html","excerpt":"","text":"","categories":[{"name":"技术","slug":"技术","permalink":"http://example.com/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[],"author":"秋雨样"},{"title":"“第一篇文章”","slug":"“第一篇文章”","date":"2020-02-03T12:37:10.000Z","updated":"2023-09-22T13:52:39.000Z","comments":true,"path":"posts/679efaa8.html","link":"","permalink":"http://example.com/posts/679efaa8.html","excerpt":"","text":"第一篇博客内容qwq 第二篇博客内容emmmm 参考文献内容CaO","categories":[],"tags":[]}],"categories":[{"name":"技术","slug":"技术","permalink":"http://example.com/categories/%E6%8A%80%E6%9C%AF/"},{"name":"资源","slug":"资源","permalink":"http://example.com/categories/%E8%B5%84%E6%BA%90/"},{"name":"随想","slug":"随想","permalink":"http://example.com/categories/%E9%9A%8F%E6%83%B3/"}],"tags":[{"name":"c语言","slug":"c语言","permalink":"http://example.com/tags/c%E8%AF%AD%E8%A8%80/"},{"name":"div4","slug":"div4","permalink":"http://example.com/tags/div4/"},{"name":"-IDM","slug":"IDM","permalink":"http://example.com/tags/IDM/"}]}